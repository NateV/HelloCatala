## Hello Catala

Catala exists to enable programmers and lawyers to work together on the same texts, to test and verify legal statutes.
It provides set of tools for annotating statutory text with code that describes the statute. Catala's compiler can then use your annotated text to

1. Test if the statute and code have the expected results.

2. Create nicely formatted versions of your annotated statute in formats such as html and latex.

3. Transpile your Catala code into code in another language. (Currently only ocaml)

This tutorial will help you get started with Catala by writing a very simple annotated text.

### Set up the Environment

Catala requires opam, the package manager for the language Ocaml to be installed. So head over to ocaml.org to get opam installed.

Next, install Catala, following the instructions on github.comCatalaLangcatala.

### Create your Catala Program 

We are going to create a very simple Catala program. This will be a single file. 
This file will contain programmer-friendly "code" interspersed with lawyer-friendly statutory text. 

You should think of the whole document as the "program". Catala enforces strict rules in the syntax of the "code" sections; it also enforces rules about
the syntax of the non-code sections. So its helpful to think of the whole document as your program, rather than 
considering the program to only be the "code" sections surrounded by completely free text.

Go ahead and create a directory for our project an empty text file. The text file can be called "hello.catala_en". The extension indicates this is a "catala" 
file written in English. 

### Basic Structure of a Catala Program

A Catala program can start with lawyer-friendly text, perhaps introducing the statute. The rest of the text is one or more "Articles". An "Article" is introduced 
with hashes indicating a "header" followed by square brackets, like [Article 1]

An Article can contain human-readable text as well as code blocks. All the text so far in this document would be valid in human-readable text sections. 
Text may contain headings, which are lines with leading hash marks. More hash marks demote a heading, just like Markdown.

Code blocks begin with three backticks and the word "catala", and close with three backticks (just like Markdown). 

Text blocks cannot contain certain characters like slashes or backticks. So even before there's any code in your program, you can periodically send it to the 
compiler to make sure your code works. At this point, you should tell the compiler to "knit" the file into a display format such as HTML. 
This way the compiler will verify the syntax even though there's no "code" yet. 

To run the program through the compiler, run "catala --language=en Html hello.catala_en" 

In this command, the "language" flag tells the compiler what human language you're using (syntax differs for different supported languages). The "Html" value tells 
the compiler to use the "HTML" backend, and render the input file into HTML. Latex is another backend for generating a nicely laid out file from your program.

At this point, if there are no errors, you will have a new ".html" file in your directory that shows what you've written so far.

### Add an Article and some code

Let's write some code. Add an Article to your program by adding a heading and a square-bracket-enclosed title for the article, such as [Article 1].

### [Article 1]

An article might start with regular text, like this. Our first code block will come next.

```catala
declaration scope Say100:
    context a_number content integer

scope Say100:
    definition a_number equals 100
```

The line "declaration scope Say100" creates a "scope" called "Say100". A scope is something like a function in other programming languages. Its an area bounding 
data and rules that apply to the data in that scope.

"context a_number content integer" says that our Say100 scope includes a piece of data called "a_number". "a_number" will hold an integer, when we use this 
scope later.

The lines "scope Say100" and "definition a_number equals 100" defines the data "a_number" inside the Say100 scope. These lines set the value of the Say100 scope's "a_number" to the integer 100.

Now we have a complete Catala program. You can compile to html again, with "catala --language=en Html hello.catala_en".

Or you can tell Catala to figure out the value of a scope the program defines. Run "catala -s Say100 --language=en Interpret hello.catala_en". You should see 
messages that "a_number = 100".

In this modified command, note that "Html" has been replaced with "Interpret". This means we want the compiler to actually run the code we've written.
And we need to tell the compiler which scope we want it to try to execute. In this simple example, there is only one scope.


### [Article 2]

```catala 
scope Say100:
    definition a_number equals 90
```

### Next up

That's a complete, if very simple, example of writing and running a Catala program. Check out the next tutorial for a more detailed look at how to describe 
a real statute in a Catala program.